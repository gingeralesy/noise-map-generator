(in-package #:mapgen)
(in-readtable :qtools)

(defvar *octave* 3)
(defvar *mode* NIL)

(defparameter *medium-blend* 4)
(defparameter *big-blend* 2)

(defclass generated-map ()
  ((noise-map :initform NIL :accessor noise-map)
   (map-image :initform NIL :accessor map-image)
   (redraw :initform T :accessor redraw)))

(defmethod paint ((genmap generated-map) target)
  (when (redraw genmap)
    (draw-map genmap))
  (let ((image (map-image genmap))
        (device (q+:device target)))
    (when (and image device)
      (with-finalizing ((rect (q+:make-qrect 0 0 (q+:width device) (q+:height device))))
        (q+:draw-image target rect image)))))

(defmethod draw-map ((genmap generated-map))
  (let ((map (noise-map genmap)))
    (when map
      (let* ((start (internal-time-millis))
             (width (first (array-dimensions map)))
             (height (second (array-dimensions map)))
             (image (q+:make-qimage width height (q+:qimage.format_argb32))))
        (dotimes (x width)
          (dotimes (y height)
            (let ((value (aref map x y)))
              (set-pixel image x y (elt *grays* value)))))
        (v:log :info :mapgen "Redrawing the map of size (~a x ~a) took ~a ms."
               width height (- (internal-time-millis) start))
        (when (map-image genmap)
          (finalize (map-image genmap))
          (setf (map-image genmap) NIL))
        (setf (map-image genmap) image
              (redraw genmap) NIL)))))

(defmethod set-size ((genmap generated-map) width height)
  (let ((old-map (noise-map genmap)))
    (unless (and (not *debug*)
                 old-map
                 (= width (first (array-dimensions old-map)))
                 (= height (second (array-dimensions old-map))))
      (let ((start (internal-time-millis)))
        (let ((map (gen-noise-map width height)))
          (setf (noise-map genmap) map
                (redraw genmap) T))
        (v:log :info :mapgen "Generation of the map with octave (~a), and size (~a x ~a) took ~a ms."
               *octave* width height (- (internal-time-millis) start))))))

;; Generators

(defun blend-maps (&rest maps)
  (let ((width 0) (height 0))
    (for:for ((map in maps))
      (let ((dimensions (array-dimensions map)))
        (when (< width (first dimensions))
          (setf width (first dimensions)))
        (when (< height (second dimensions))
          (setf height (second dimensions)))))
    (let ((sized-maps))
      (for:for ((map in maps))
        (let ((map-width (first (array-dimensions map)))
              (map-height (second (array-dimensions map))))
          (push
           (if (or (/= width map-width) (/= height map-height))
               (resize-map map width height) map)
           sized-maps)))
      (setf width (1- width)
            height (1- height))
      (let ((new-map (make-array (list width height) :initial-element 0)))
        (dotimes (x width)
          (dotimes (y height)
            (for:for ((map over sized-maps))
              (incf (aref new-map x y) (aref map x y)))
            (setf (aref new-map x y) (floor (/ (aref new-map x y) (length sized-maps))))))
        new-map))))

(defun interpolate (x0 x1 alpha)
  (+ (* x0 (- 1.0 alpha)) (* alpha x1)))

(defun gen-noise-map (width height)
  (let ((width (1+ width))
        (height (1+ height)))
    (blend-maps
     (gen-perlin-noise (gen-whitenoise (ceiling (/ width *medium-blend*)) (ceiling (/ height *medium-blend*))) *octave*)
     (gen-perlin-noise (gen-whitenoise (ceiling (/ width *big-blend*)) (ceiling (/ height *big-blend*))) *octave*)
     (gen-perlin-noise (gen-whitenoise width height) *octave*))))

(defun resize-map (map dest-width dest-height)
  (let ((src-width (first (array-dimensions map)))
        (src-height (second (array-dimensions map))))
    (if (and (= src-width dest-width) (= src-height dest-height))
        map
        (let ((diff-x (/ dest-width src-width))
              (diff-y (/ dest-height src-height))
              (dest-map (make-array (list dest-width dest-height) :initial-element -1)))
          (dotimes (x0 src-width)
            (dotimes (y0 src-height)
              (let* ((x1 (mod (1+ x0) src-width))
                     (y1 (mod (1+ y0) src-height))
                     (dest-x (mod (ceiling (* x0 diff-x)) dest-width))
                     (dest-y (mod (ceiling (* y0 diff-y)) dest-height))
                     (current (aref map x0 y0))
                     (far-x (aref map x1 y0))
                     (far-y (aref map x0 y1))
                     (far-xy (aref map x1 y1)))
                (dotimes (i (ceiling diff-x))
                  (let ((mid-x (mod (+ dest-x i) dest-width))
                        (near (interpolate current far-x (/ i diff-x)))
                        (far (interpolate far-y far-xy (/ i diff-x))))
                    ;; wherever you are...
                    (dotimes (j (ceiling diff-y))
                      (let ((mid-y (mod (+ dest-y j) dest-height)))
                        (setf (aref dest-map mid-x mid-y) (interpolate near far (/ j diff-y))))))))))
          dest-map))))

(defun gen-whitenoise (width height)
  (let ((noise (make-array (list width height) :initial-element 0)))
    (dotimes (x width)
      (dotimes (y height)
        (setf (aref noise x y) (random 256))))
    noise))

(defun gen-smooth-noise (base-noise octave)
  (let* ((dimensions (array-dimensions base-noise))
         (width (first dimensions))
         (height (second dimensions))
         (smooth-noise (make-array dimensions :initial-element 0))
         (sample-period (ash 1 octave))
         (sample-freq (/ 1.0 sample-period)))
    (dotimes (x width)
      (let* ((sample-x0 (* (floor (/ x sample-period)) sample-period))
             (sample-x1 (mod (+ sample-x0 sample-period) width))
             (horiz-blend (* (- x sample-x0) sample-freq)))
        (dotimes (y height)
          (let* ((sample-y0 (* (floor (/ y sample-period)) sample-period))
                 (sample-y1 (mod (+ sample-y0 sample-period) height))
                 (verti-blend (* (- y sample-y0) sample-freq))
                 (top (interpolate (aref base-noise sample-x0 sample-y0)
                                   (aref base-noise sample-x1 sample-y0)
                                   horiz-blend))
                 (bottom (interpolate (aref base-noise sample-x0 sample-y1)
                                      (aref base-noise sample-x1 sample-y1)
                                      horiz-blend)))
            (setf (aref smooth-noise x y) (floor (interpolate top bottom verti-blend)))))))
    smooth-noise))

(defun gen-perlin-noise (base-noise octave-count)
  (let* ((dimensions (array-dimensions base-noise))
         (width (first dimensions))
         (height (second dimensions))
         (smooth-noises (make-array octave-count :initial-element NIL))
         (persistence 0.5))
    (dotimes (octave octave-count)
      (setf (aref smooth-noises octave) (gen-smooth-noise base-noise octave)))
    (let ((perlin-noise (make-array dimensions :initial-element 0))
          (amplitude 1.0)
          (total-amplitude 0.0))
      (loop for i from (1- octave-count) downto 0 do
            (let ((octave (elt smooth-noises i)))
              (setf amplitude (* amplitude persistence))
              (incf total-amplitude amplitude)
              (dotimes (x width)
                (dotimes (y height)
                  (incf (aref perlin-noise x y) (* (aref octave x y) amplitude))))))
      (dotimes (x width)
        (dotimes (y height)
          (setf (aref perlin-noise x y) (floor (/ (aref perlin-noise x y) total-amplitude)))))
      perlin-noise)))
